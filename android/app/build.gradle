apply plugin: 'com.android.application'

android {
    namespace 'org.sandboxy'
    compileSdk 33

    defaultConfig {
        applicationId "org.sandboxy"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0.0"
        
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared",
                         "-DUSE_LUAJIT=0",
                         "-DENABLE_LEVELDB=0",
                         "-DENABLE_POSTGRESQL=0",
                         "-DENABLE_REDIS=0",
                         "-DENABLE_SPATIAL=0",
                         "-DENABLE_GETTEXT=1",
                         "-DRUN_IN_PLACE=0"
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("../keystore-sandboxy.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias "sandboxykey"
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['../assets']
        }
    }

    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
            version "3.22.1"
        }
    }
}

task prepareAssets() {
	def assetsFolder = "build/assets"
	def projRoot = rootDir.parent

	// See issue #4638
	def unsupportedLanguages = new File("${projRoot}/src/unsupported_language_list.txt").text.readLines()

	doFirst {
		logger.lifecycle('Preparing assets at {}', assetsFolder)
	}
	doLast {
		copy {
			from "${projRoot}/minetest.conf.example", "${projRoot}/README.md" into assetsFolder
		}
		copy {
			from "${projRoot}/doc/lgpl-2.1.txt" into assetsFolder
		}
		copy {
			from "${projRoot}/builtin" into "${assetsFolder}/builtin"
		}
		copy {
			from "${projRoot}/client/shaders" into "${assetsFolder}/client/shaders"
		}
		copy {
			from "${projRoot}/irr/media/Shaders" into "${assetsFolder}/client/shaders/Irrlicht"
		}
		copy {
			from "${projRoot}/fonts" include "*.ttf" into "${assetsFolder}/fonts"
		}
		copy {
			from "${projRoot}/textures/base/pack" into "${assetsFolder}/textures/base/pack"
		}

		// compile translations
		fileTree("${projRoot}/po").include("**/*.po").grep {
			it.parentFile.name !in unsupportedLanguages
		}.forEach { poFile ->
			def moPath = "${assetsFolder}/locale/${poFile.parentFile.name}/LC_MESSAGES/"
			file(moPath).mkdirs()
			exec {
				commandLine 'msgfmt', '-o', "${moPath}/luanti.mo", poFile
			}
		}

		file("${assetsFolder}/.nomedia").text = ""
	}

	task zipAssets(dependsOn: prepareAssets, type: Zip) {
		archiveFileName = "assets.zip"
		from assetsFolder
		destinationDirectory = file("src/main/assets")
	}
}

preBuild.dependsOn zipAssets
prepareAssets.dependsOn ':native:getDeps'

clean {
	delete new File("src/main/assets", "assets.zip")
}

dependencies {
	implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
}
